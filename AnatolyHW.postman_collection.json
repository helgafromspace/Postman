{
	"info": {
		"_postman_id": "a1e9096f-7871-4f49-a9c3-767fc8c1f246",
		"name": "Anatoly HW saved",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18802411"
	},
	"item": [
		{
			"name": "all data test",
			"item": [
				{
					"name": "All data test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
									"*/\r",
									"\r",
									"const name = pm.iterationData.get('name');\r",
									"const age = pm.iterationData.get('age');\r",
									"const salary = pm.iterationData.get('salary');\r",
									"\r",
									"function nameValidation(name){\r",
									"    return name && name.length > 2 && name.length < 41 && name.trim() === name \r",
									"}\r",
									"\r",
									"function ageValidation(age){\r",
									"    return age && !isNaN(age) && age >= 18 && age < 121 && Number.isInteger(+age)\r",
									"}\r",
									"\r",
									"function salaryValidation(salary){\r",
									"    return salary && !isNaN(salary) && salary >= 1 && salary < 1000001 && Number.isInteger(+salary)\r",
									"}\r",
									"\r",
									"function validate(name,age,salary){\r",
									"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary)\r",
									"}\r",
									"\r",
									"if(validate(name,age,salary)){\r",
									"\r",
									"    pm.test(`Status code is 200 with name = ${name}, age = ${age}, salary = ${salary}`, function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(`Status code is NOT 200 with name = ${name}, age == ${age}, salary == ${salary}`, function () {\r",
									"        pm.response.to.not.have.status(200);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "separated tests",
			"item": [
				{
					"name": "Positive check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: name length < min(3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Ty",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: name length > max(40)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfg",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: name has prefix space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "    Robert",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: name has postfix space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Robert    ",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age key is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age key is absent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: name key is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: name key is absent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age key < min(18)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "17",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age key > max(120)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "121",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age consists of letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "abc",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age has noninteger value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "17.5",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: age consists of symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": " *?/\\|<>,.()[]{};:'\"!@#$%^&",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary key is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary key is absent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary key < min(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary key > max(1000000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000001",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary consists of letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "ghgj",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary consists of symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": " * ? / \\ | < > , . ( ) [ ] { } ; : ' \" ! @ # $ % ^ &",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test: salary has noninteger value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное*/\r",
									"\r",
									"// Позитивный тест: name, age, salary  параметры соответствуют требованиям и присутствуют в запросе\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "100000.22",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{link}}user_info_2",
							"host": [
								"{{link}}user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task 2 - Cycle for salary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"*/\r",
							"\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_salary = Number(req.salary)\r",
							"let req_arr = [req_salary,req_salary * 2, req_salary * 3]\r",
							"let res_salary = jsonData.salary\r",
							"\r",
							"for(i=0; i < res_salary.length; i++){\r",
							"    let result = `Response [${i}] salary value equals to request salary value`\r",
							"    pm.test(result, function () {\r",
							"    pm.expect(Number(res_salary[i])).to.eql(req_arr[i]);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{link}}object_info_4?name=Olya&age=28&salary=2000",
					"host": [
						"{{link}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3- Deep comparsion of objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)*/\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let jsonData = pm.response.json();\r",
							"let resp = {};\r",
							"for(let key in req){\r",
							"    resp[key] = isNaN(jsonData[key]) ? jsonData[key] : +jsonData[key];\r",
							"    req[key] = isNaN(req[key]) ? req[key] : + req[key];\r",
							"}\r",
							"pm.test(\"Response object deeply equals request object\", function () {\r",
							"    pm.expect(resp).to.deep.eql(req);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{link}}object_info_3?name=Olya&age=28&salary=2000",
					"host": [
						"{{link}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5- Salary rise check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							" 1)Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"let res_salary_arr = ['start_qa_salary','qa_salary_after_6_months','qa_salary_after_12_months','qa_salary_after_1.5_year','qa_salary_after_3.5_years','person']\r",
							"\r",
							"for(el of res_salary_arr){\r",
							"    let result = `JSON has property ${el}`\r",
							"    pm.test(result, function () {\r",
							"    pm.expect(jsonData).to.have.property(el);\r",
							"});\r",
							"}\r",
							"\r",
							"/*2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/\r",
							"let req = request.data\r",
							"\r",
							"let req_salary = Number(req.salary)\r",
							"\r",
							"let res_sal_arr = [jsonData.start_qa_salary,jsonData.qa_salary_after_6_months,jsonData.qa_salary_after_12_months,jsonData['qa_salary_after_1.5_year'],jsonData['qa_salary_after_3.5_years']]\r",
							"\r",
							"let req_sal_arr = [req_salary,req_salary * 2, req_salary * 2.7,req_salary * 3.3,req_salary * 3.8]\r",
							"\r",
							"for(i=0; i < res_sal_arr.length; i++){\r",
							"    let result = `Параметр ${res_sal_arr[i]} равен параметру ${req_sal_arr[i]} из request`;\r",
							"    pm.test(result, function () {\r",
							"    pm.expect(res_sal_arr[i]).to.eql(req_sal_arr[i]);\r",
							"});\r",
							"}\r",
							"\r",
							"\r",
							"/* *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.*/\r",
							"res_salary_arr = res_salary_arr.slice(0,-1);\r",
							"\r",
							"for(i=0; i < res_sal_arr.length; i++){\r",
							"    let result = `Параметр ${res_sal_arr[i]} равен параметру ${req_sal_arr[i]} из request`;\r",
							"\r",
							"    pm.test(result, function () {\r",
							"    pm.expect(res_sal_arr[i]).to.eql(req_sal_arr[i]);\r",
							"});\r",
							"    \r",
							"    let result2 = `JSON has property ${res_salary_arr[i]}`\r",
							"    pm.test(result2, function () {\r",
							"    pm.expect(jsonData).to.have.property(res_salary_arr[i]);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{link}}user_info_2",
					"host": [
						"{{link}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}