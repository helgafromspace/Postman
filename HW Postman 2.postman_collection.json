{
	"info": {
		"_postman_id": "ede8bfbf-4f03-4616-ac55-d9a8b4f02eab",
		"name": "HW Postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18802411"
	},
	"item": [
		{
			"name": "2 - Values check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/user_info_3\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200 */\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Response name value equals to request name value\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Olya\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Response age value equals to request age value\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"28\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Response salary value equals to request salary value\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Response name value equals to request name value via request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Response age value equals to request age value via request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Response salary value equals to request salary value via request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)*/\r",
							"let req_salary = Number(req.salary)\r",
							"\r",
							"pm.test(\"Salary in 1.5 year value check\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{link}}user_info_3",
					"host": [
						"{{link}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "1 - Body is correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/first\r",
							"1. Отправить запрос.\r",
							"2.Статус код 200 */\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{link}}first",
					"host": [
						"{{link}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - Get method values check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/object_info_3\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name value equals to request name value via request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Response age value equals to request age value via request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Response salary value equals to request salary value via request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let dog = family.pets.dog\r",
							"pm.test(\"Property dog has property name\", function () {\r",
							"    pm.expect(dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Property dog has property age\", function () {\r",
							"    pm.expect(dog).to.have.property('age')\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Property name has value Luky\", function () {\r",
							"    pm.expect(dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Property age has value 4\", function () {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{link}}object_info_3?name=Olya&age=28&salary=2000",
					"host": [
						"{{link}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Salary values comparsion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/object_info_4\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Response name value equals to request name value via request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Response age value equals to request age value via request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(Number(req.age));\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = Number(req.salary)\r",
							"console.log(req_salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"let res_salary = jsonData.salary\r",
							"console.log(res_salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(res_salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(res_salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(res_salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response [0] salary value equals to request salary value\", function () {\r",
							"    pm.expect(res_salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response [1] salary value equals to doubled request salary value\", function () {\r",
							"    pm.expect(Number(res_salary[1])).to.eql(Number(req_salary * 2));\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Response [2] salary value equals to tripled request salary value\", function () {\r",
							"    pm.expect(Number(res_salary[2])).to.eql(Number(req_salary * 3));\r",
							"});\r",
							"\r",
							"/*15. Создать в окружении переменную name\r",
							"16. Создать в окружении переменную age\r",
							"17. Создать в окружении переменную salary\r",
							"\r",
							"Создаем вручную через вкладку Environment для окружения local*/\r",
							"//18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", jsonData.name)\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age)\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0])\r",
							"\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(el of res_salary){\r",
							"    console.log(el)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{link}}object_info_4?name=Olya&age=28&salary=2000",
					"host": [
						"{{link}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5- Salary rise check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"http://162.55.220.72:5005/user_info_2\r",
							"1. Вставить параметр salary из окружения в request\r",
							"2. Вставить параметр age из окружения в age\r",
							"3. Вставить параметр name из окружения в name\r",
							"\r",
							"Внести в разделе Body параметры вида {{salary}},{{age*}},{{name}}\r",
							"\r",
							"4. Отправить запрос.*/\r",
							"\r",
							"\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"JSON has property start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary')\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"JSON has property qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"JSON has property qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"JSON has property qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"JSON has property qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"JSON has property person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"});\r",
							"\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = Number(req.salary)\r",
							"\r",
							"pm.test(\"Параметр start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Параметр qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Параметр qa_salary_after_1.5_year равен salary*3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req_salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_3.5_years равен salary*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req_salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let u_name = jsonData.person.u_name\r",
							"let u_age = jsonData.person.u_age\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Параметр u_age равен age из request\", function () {\r",
							"    pm.expect(u_age).to.eql(Number(req.age));\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person. */\r",
							"let person = jsonData.person\r",
							"for(el in person){\r",
							"    console.log(el,person[el])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{link}}user_info_2",
					"host": [
						"{{link}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}